/*********************************************************
 * Juego de Ajedrez - Detección de Jaque y Jaque Mate
 *********************************************************/
import "chess_types"
import "chess_moves"

// Encuentra la posición del rey del color especificado
func encontrar_rey(color)
    for (var x=0; x<8; x++)
        for (var y=0; y<8; y++)
            if (Tablero[x][y].pieza == REY and Tablero[x][y].color_pieza == color) then
                return [x, y]
            end
        end
    end
    return nil
end

// Verifica si una casilla está bajo ataque por el color especificado
func casilla_bajo_ataque(x, y, color_atacante)
    // Comprobar ataque desde todas las posiciones del tablero
    for (var x_orig=0; x_orig<8; x_orig++)
        for (var y_orig=0; y_orig<8; y_orig++)
            if (Tablero[x_orig][y_orig].color_pieza == color_atacante) then
                // Verificar si la pieza puede moverse a la casilla objetivo
                if (validar_movimiento(x_orig, y_orig, x, y)) then
                    return true
                end
            end
        end
    end
    return false
end

// Verifica si un rey está en jaque
func esta_en_jaque(color)
    var pos_rey = encontrar_rey(color)
    if (pos_rey == nil) then
        return false
    end

    var color_atacante = (color == BLANCO) ? NEGRO : BLANCO
    return casilla_bajo_ataque(pos_rey[0], pos_rey[1], color_atacante)
end

// Simula un movimiento y verifica si deja al rey en jaque
func movimiento_deja_en_jaque(x_orig, y_orig, x_dest, y_dest)
    // Guardar estado actual
    var pieza_orig = Tablero[x_orig][y_orig].clone()
    var pieza_dest = Tablero[x_dest][y_dest].clone()

    // Realizar movimiento temporal
    Tablero[x_dest][y_dest].pieza = pieza_orig.pieza
    Tablero[x_dest][y_dest].color_pieza = pieza_orig.color_pieza
    Tablero[x_orig][y_orig].pieza = NINGUNA
    Tablero[x_orig][y_orig].color_pieza = NINGUNO

    // Verificar jaque
    var en_jaque = esta_en_jaque(pieza_orig.color_pieza)

    // Restaurar estado
    Tablero[x_orig][y_orig].pieza = pieza_orig.pieza
    Tablero[x_orig][y_orig].color_pieza = pieza_orig.color_pieza
    Tablero[x_dest][y_dest].pieza = pieza_dest.pieza
    Tablero[x_dest][y_dest].color_pieza = pieza_dest.color_pieza

    return en_jaque
end

// Verifica si hay jaque mate
func es_jaque_mate(color)
    if (!esta_en_jaque(color)) then
        return false
    end

    for (var x_orig=0; x_orig<8; x_orig++)
        for (var y_orig=0; y_orig<8; y_orig++)
            if (Tablero[x_orig][y_orig].color_pieza != color) then
                continue
            end

            for (var x_dest=0; x_dest<8; x_dest++)
                for (var y_dest=0; y_dest<8; y_dest++)
                    if (validar_movimiento(x_orig, y_orig, x_dest, y_dest) and
                       !movimiento_deja_en_jaque(x_orig, y_orig, x_dest, y_dest)) then
                        return false
                    end
                end
            end
        end
    end
    return true
end

// Extiende la función realizar_movimiento para incluir la validación de jaque
func realizar_movimiento_seguro(x_orig, y_orig, x_dest, y_dest)
    // Primero validar el movimiento básico
    if (!validar_movimiento(x_orig, y_orig, x_dest, y_dest)) then
        return false
    end

    // Verificar si el movimiento deja al rey en jaque
    if (movimiento_deja_en_jaque(x_orig, y_orig, x_dest, y_dest)) then
        return false
    end

    // Realizar el movimiento
    Tablero[x_dest][y_dest].pieza = Tablero[x_orig][y_orig].pieza
    Tablero[x_dest][y_dest].color_pieza = Tablero[x_orig][y_orig].color_pieza

    // Limpiar casilla origen
    Tablero[x_orig][y_orig].pieza = NINGUNA
    Tablero[x_orig][y_orig].color_pieza = NINGUNO

    // Actualizar estado
    Estado.movimientos++

    // Verificar jaque al oponente
    var color_oponente = (Estado.turno == BLANCO) ? NEGRO : BLANCO
    if (esta_en_jaque(color_oponente)) then
        if (es_jaque_mate(color_oponente)) then
            println("\n¡JAQUE MATE!")
            Estado.terminar = true
        else
            println("\n¡JAQUE!")
        end
    end

    // Cambiar turno
    Estado.turno = color_oponente

    return true
end

