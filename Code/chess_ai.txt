// chess_ia.aru
use Math

import "chess_types"
import "chess_moves"
import "chess-check"


const CENTRO = [[3,3], [3,4], [4,3], [4,4]]  // 0-based (ej. [3,3] = d4)
const VALOR_PIEZAS = {NINGUNA: 0, PEON: 1, CABALLO: 3, ALFIL: 3, TORRE: 5, DAMA: 9, REY: 1000}
var historial_posiciones = {}  // Nuevo: Registro de posiciones

func evaluar_tablero(color_ia)
    var puntuacion = 0
    var pieza,color
    for (var x=0; x<8; x++)
        for (var y=0; y<8; y++)
            pieza = Tablero[x][y].pieza
            color = Tablero[x][y].color_pieza
            if (color != NINGUNO) then  // Solo evaluar casillas con piezas
                if (color == color_ia) then
                    puntuacion += VALOR_PIEZAS[pieza]
                else
                    puntuacion -= VALOR_PIEZAS[pieza]
                end
            end
        end
    end
    return puntuacion
end

// Modifica la función evaluar_movimiento
func evaluar_movimiento(x_orig, y_orig, x_dest, y_dest, color)
    var puntuacion = 0
    var pieza = Tablero[x_orig][y_orig].pieza
    var pieza_dest = Tablero[x_dest][y_dest].pieza
   //println("Llamada a evaluar_movimiento : ", puntuacion);
    // Capturas
    if (pieza_dest != NINGUNA) then
        puntuacion += VALOR_PIEZAS[pieza_dest] * 3
    end
    //println("Capturas : ", puntuacion);
    // Control del centro
    var en_centro = false
    for (var i=0; i<CENTRO.size(); i++)
        if (x_dest == CENTRO[i][0] and y_dest == CENTRO[i][1]) then
            en_centro = true
            break
        end
    end
    if (en_centro) then
        puntuacion += (pieza == PEON) ? 15 : 25  // Reducir incentivo
    end
    //println("Control Centro : ", puntuacion);
    // Desarrollo temprano
    if (Estado.movimientos < 20) then
        if (pieza == CABALLO or pieza == ALFIL) then
            var progreso = 1 - (Estado.movimientos / 10)
            puntuacion += 40 * progreso
        end
    end


    //println("Desarroyo temprano : ", puntuacion);
    // Enroque
    if (pieza == REY and abs(x_dest - x_orig) == 2) then
        puntuacion += 150
    end

    // Diagonales abiertas para alfiles (corregido)
if (pieza == ALFIL) then
    var color_casilla = (x_dest + y_dest) % 2  // 0: casilla blanca, 1: negra
    var direcciones = (color_casilla == 0) ? [[1,1], [-1,-1]] : [[1,-1], [-1,1]]  // Direcciones según color
    foreach (var dir in direcciones)
        var abierto_dir = true
        var nx = x_dest + dir[0]
        var ny = y_dest + dir[1]
        while (esta_en_tablero(nx, ny))
            if (Tablero[nx][ny].pieza != NINGUNA) then
                abierto_dir = false
                break
            end
            nx += dir[0]
            ny += dir[1]
        end
        if (abierto_dir) then
            puntuacion += 35
            break  // Basta con una diagonal abierta
        end
    end
end
//println("Diagonales abiertas : ", puntuacion);
// Peones doblados (versión mejorada)
if (pieza == PEON) then
    var contador_orig = 0
    var contador_dest = 0
    // Contar en archivo origen
    for (var y_peon=0; y_peon<8; y_peon++)
        if (Tablero[x_orig][y_peon].pieza == PEON and Tablero[x_orig][y_peon].color_pieza == color) then
            contador_orig++
        end
    end
    // Contar en archivo destino (después del movimiento)
    contador_dest = contador_orig - 1  // Se resta el peón movido
    for (var y_peon=0; y_peon<8; y_peon++)
        if (y_peon != y_orig and Tablero[x_dest][y_peon].pieza == PEON and Tablero[x_dest][y_peon].color_pieza == color) then
            contador_dest++
        end
    end
    // Penalizar si aumenta el número de peones doblados
    puntuacion -= (contador_dest > 1) ? (contador_dest * 15) : 0
end
//println("Peones doblados : ", puntuacion);
// Peones centrales avanzados
if (pieza == PEON) then
    var fila_inicial = (color == BLANCO) ? 1 : 6
    var avanzado = abs(x_dest - fila_inicial)
    if (y_dest == 3 or y_dest ==4) then  // Columnas centrales
        puntuacion += avanzado * 15  // +15 por cada paso adelante en centro
    end
end

    //puntuacion += random(0, 5)

     // ---- Nueva heurística: Seguridad del Rey ----
    if (pieza == REY) then
        // Penalizar mover el rey en apertura
        if (Estado.movimientos < 15) then
            puntuacion -= 20000
        end
        // Penalizar si el rey está en el centro
        if (en_centro) then
            puntuacion -= 15000
        end
    end
    //println("Puntuacion final : ", puntuacion);
    return puntuacion
end

func generar_movimiento_ia(color)
    var mejor_movimiento = nil
    var mejor_puntuacion = -99999
    var temp_tablero = clonar_tablero()
    var profundidad = 2  // Ajustar según capacidad de procesamiento

    // Generar todos los movimientos posibles
    var movimientos_posibles = []
    for (var x_orig=0; x_orig<8; x_orig++)
        for (var y_orig=0; y_orig<8; y_orig++)
            if (Tablero[x_orig][y_orig].color_pieza == color) then
                for (var x_dest=0; x_dest<8; x_dest++)
                    for (var y_dest=0; y_dest<8; y_dest++)
                        if (validar_movimiento(x_orig, y_orig, x_dest, y_dest) and
                           !movimiento_deja_en_jaque(x_orig, y_orig, x_dest, y_dest)) then
                            movimientos_posibles.insert([x_orig, y_orig, x_dest, y_dest])
                        end
                    end
                end
            end
        end
    end

   // Evaluar cada movimiento con MiniMax con poda alpha-beta
    foreach (var movimiento in movimientos_posibles)
        realizar_movimiento_temporal(movimiento[0], movimiento[1], movimiento[2], movimiento[3])

// ---> Evaluar el movimiento actual <---
        var puntuacion_base = evaluar_movimiento(
            movimiento[0],
            movimiento[1],
            movimiento[2],
            movimiento[3],
            color
        )

        // Llamada a la nueva función minimax_alphabeta
        var puntuacion_minimax = minimax_alphabeta(profundidad - 1, -99999, 99999, false, color)
        var puntuacion_total = puntuacion_base + puntuacion_minimax  // <--- Sumar ambas

        restaurar_tablero(temp_tablero)

        if (puntuacion_total > mejor_puntuacion) then
            mejor_puntuacion = puntuacion_total
            mejor_movimiento = movimiento
        end
    end

    return mejor_movimiento
end


func calcular_hash_posicion()
    var hash = ""

    hash += (Estado.turno == BLANCO) ? "w" : "b"
    for (var x = 0; x < 8; x++)
        for (var y = 0; y < 8; y++)
            hash += Tablero[x][y].pieza.string() + "-" + Tablero[x][y].color_pieza + "|"
        end
    end
    return hash
end

// -------------------------------------
//    MINIMAX CON PODA ALPHA-BETA
// -------------------------------------
func minimax_alphabeta(profundidad, alpha, beta, es_maximizando, color_jugador)
    // 1) Calcular el hash de la posición actual
    var hash = calcular_hash_posicion()

    // 2) Incrementar el contador para esta posición
    if (historial_posiciones.exists(hash)) then
        historial_posiciones[hash] = historial_posiciones[hash] + 1
    else
        historial_posiciones[hash] = 1
    end

    // 3) Si la posición se ha repetido >= 3 veces, penalizamos (o devolvemos empate)
    if (historial_posiciones[hash] >= 3) then
        historial_posiciones[hash] = historial_posiciones[hash] - 1
        return (color_jugador == BLANCO) ? -100 : 100
    end

    // 4) Caso base: profundidad == 0
    if (profundidad == 0) then
        var valor = evaluar_tablero(color_jugador)

        historial_posiciones[hash] = historial_posiciones[hash] - 1

        if (historial_posiciones[hash] == 0) then
            historial_posiciones.delete(hash)
        end

        return valor
    end

    // 5) Clonar el tablero para restaurarlo tras cada movimiento
    var temp_tablero = clonar_tablero()

    // Determina de quién es el turno a partir de es_maximizando
    var color_actual = (es_maximizando) ? color_jugador
                                        : ((color_jugador == BLANCO) ? NEGRO : BLANCO)

    // 6) Inicializar la mejor valoración
    var mejor_valor = (es_maximizando) ? -99999 : 99999

    // 7) Recorrer todas las piezas del color actual
    for (var x=0; x<8; x++)
        for (var y=0; y<8; y++)
            if (Tablero[x][y].color_pieza != color_actual) then
                continue
            end

            // Generar movimientos válidos
            for (var x_dest=0; x_dest<8; x_dest++)
                for (var y_dest=0; y_dest<8; y_dest++)
                    if (validar_movimiento(x, y, x_dest, y_dest) and
                        !movimiento_deja_en_jaque(x, y, x_dest, y_dest)) then

                        // 7.1) Ejecutar el movimiento temporalmente
                        realizar_movimiento_temporal(x, y, x_dest, y_dest)

                        // 7.2) Llamada recursiva minimax con poda
                        var valor_actual = minimax_alphabeta(profundidad - 1, alpha, beta, !es_maximizando, color_jugador)

                        // 7.3) Restaurar el tablero
                        restaurar_tablero(temp_tablero)

                        // 7.4) Actualizar mejor_valor, alpha, beta y verificar podas
                        if (es_maximizando) then
                            mejor_valor = Math.max(mejor_valor, valor_actual)
                            alpha = Math.max(alpha, mejor_valor)
                            if (beta <= alpha) then
                                // Poda: no seguir evaluando
                                break
                            end
                        else
                            mejor_valor = Math.min(mejor_valor, valor_actual)
                            beta = Math.min(beta, mejor_valor)
                            if (beta <= alpha) then
                                // Poda
                                break
                            end
                        end
                    end
                end
            end
        end
    end

    // 8) Decrementar contador de esta posición antes de salir
    historial_posiciones[hash] = historial_posiciones[hash] - 1
    if (historial_posiciones[hash] == 0) then
        historial_posiciones.delete(hash)
    end

    // 9) Devolver el mejor valor encontrado
    return mejor_valor
end

// --------------------- Funciones auxiliares ---------------------
func clonar_tablero()
    var copia = []
    for (var x=0; x<8; x++)
        copia.insert([])
        for (var y=0; y<8; y++)
            copia[x].insert(Tablero[x][y].clone())
        end
    end
    return copia
end

func realizar_movimiento_temporal(x_orig, y_orig, x_dest, y_dest)
    Tablero[x_dest][y_dest].pieza = Tablero[x_orig][y_orig].pieza
    Tablero[x_dest][y_dest].color_pieza = Tablero[x_orig][y_orig].color_pieza
    Tablero[x_orig][y_orig].pieza = NINGUNA
    Tablero[x_orig][y_orig].color_pieza = NINGUNO
end

func restaurar_tablero(copia)
    for (var x=0; x<8; x++)
        for (var y=0; y<8; y++)
            Tablero[x][y].pieza = copia[x][y].pieza
            Tablero[x][y].color_pieza = copia[x][y].color_pieza
        end
    end
end

