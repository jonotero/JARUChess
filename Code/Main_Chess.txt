/*********************************************************
 * Juego de Ajedrez - Programa Principal
 *********************************************************/
use Display

var a= Display.draw

import "chess_types"
import "chess_init"
import "chess_moves"
import "chess-check"
import "chess_ai"

const max_movimientos = 100

// Función para limpiar la pantalla (opcional según el sistema)
func limpiar_pantalla()
    for (var i=0; i<50; i++)
        println()
    end
end

// Inicializar el juego
iniciar_tablero()

/*
// Bucle principal del juego
while (!Estado.terminar)
    limpiar_pantalla()

    // Mostrar estado actual
    println("\nTurno de las ", (Estado.turno == BLANCO) ? "BLANCAS" : "NEGRAS")  // *** Espacio después de "las"
    println("\nMovimiento: ", Estado.movimientos)  // *** Espacio después de "Movimiento:"
    mostrar_tablero()

    // Verificar si hay jaque
    if (esta_en_jaque(Estado.turno)) then
        println("\n¡ESTÁS EN JAQUE!")
    end

    // *** Inicio de la modificación: Turno jugador vs IA
    if (Estado.turno == BLANCO) then
        // Turno del JUGADOR HUMANO (blancas)
        println("\nIngrese origen (ej: e2) o 'q' para salir: ")
        var origen = input()
        if (origen == "q") then
            break
        end
        println("\nIngrese destino (ej: e4): ")
        var destino = input()

        // Convertir entrada a coordenadas
        var x_orig = convertir_a_numero(origen[0])
        var y_orig = 8 - origen[1].int()
        var x_dest = convertir_a_numero(destino[0])
        var y_dest = 8 - destino[1].int()

        // Validar coordenadas
        if (x_orig < 0 or y_orig < 0 or x_dest < 0 or y_dest < 0) then
            println("\nError: Coordenadas inválidas")
            print("\nPresione Enter para continuar...")
            input()
            continue
        end

        // Validar que la pieza sea del color correcto
        if (Tablero[x_orig][y_orig].color_pieza != Estado.turno) then
            println("\nError: No es tu turno\n")
            print("\nPresione Enter para continuar...\n")
            input()
            continue
        end

        // Intentar realizar el movimiento
        if (!realizar_movimiento_seguro(x_orig, y_orig, x_dest, y_dest)) then
            println("\nError: Movimiento inválido o deja al rey en jaque")
            print("\nPresione Enter para continuar...\n")
            input()
            continue
        end

    else
        // Turno de la IA (negras)
        println("\nLa IA está pensando...")
        var movimiento_ia = generar_movimiento_ia()  // *** Llamada a la IA

        if (movimiento_ia != nil) then
            realizar_movimiento_seguro(
                movimiento_ia[0],  // x_orig
                movimiento_ia[1],  // y_orig
                movimiento_ia[2],  // x_dest
                movimiento_ia[3]   // y_dest
            )
        else
            // Si no hay movimientos válidos: jaque mate o tablas
            println("¡La IA no puede mover! Has ganado.")
            Estado.terminar = true
        end

        //print("\nPresione Enter para continuar...")  // *** Pausa para ver el movimiento
        //input()
    end
    // *** Fin de la modificación
end
*/

// Bucle principal del juego (IA vs IA)
while (!Estado.terminar and Estado.movimientos < max_movimientos)
    limpiar_pantalla()
    mostrar_tablero()
    // Mostrar estado actual
    println("\nTurno de las ", (Estado.turno == BLANCO) ? "BLANCAS" : "NEGRAS")
    println("\nMovimiento: ", Estado.movimientos)
    //mostrar_tablero()

    // Verificar jaque
    if (esta_en_jaque(Estado.turno)) then
        println("\n¡JAQUE!")
    end

    // Generar movimiento para la IA actual
    var color_ia = Estado.turno
    var movimiento_ia = generar_movimiento_ia(color_ia)  // *** Función modificada

    if (movimiento_ia != nil) then
        realizar_movimiento_seguro(
            movimiento_ia[0],
            movimiento_ia[1],
            movimiento_ia[2],
            movimiento_ia[3]
        )
        // Pausa para visualizar

        //pause(1000)  // 1 segundo de espera entre movimientos
    else
        // Fin del juego
        println("\n¡JAQUE MATE! Ganan las ", (color_ia == BLANCO) ? "NEGRAS" : "BLANCAS")
        Estado.terminar = true
    end
end

println("\n¡Fin del juego!")
if (Estado.terminar) then
    println("¡", (Estado.turno == NEGRO) ? "BLANCAS" : "NEGRAS", " GANAN!")
end

